call plug#begin('~/.vim/plugged')
"colorscheme
Plug 'morhetz/gruvbox'
Plug 'joshdick/onedark.vim'
Plug 'lifepillar/vim-solarized8'
Plug 'cormacrelf/vim-colors-github'
Plug 'wojciechkepka/vim-github-dark'
" Plug 'vim-scripts/darktango.vim'
" Plug 'tomasiser/vim-code-dark'
" Plug 'vim-python/python-syntax'

"statusline
Plug 'w0rp/ale'
Plug 'itchyny/lightline.vim'
Plug 'maximbaz/lightline-ale'
Plug 'shinchu/lightline-gruvbox.vim'

"cpp
Plug 'bfrg/vim-cpp-modern'
Plug 'rhysd/vim-clang-format'
" Plug 'bbchung/clighter8'
Plug 'octol/vim-cpp-enhanced-highlight'
" Plug 'vim-scripts/TagHighlight'
" Plug 'jeaye/color_coded'

"fzf
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'yuki-ycino/fzf-preview.vim'

"html
Plug 'mattn/emmet-vim'

"markdown
Plug 'plasticboy/vim-markdown'
" Plug 'suan/vim-instant-markdown'

Plug 'scrooloose/nerdtree'
Plug 'philrunninger/nerdtree-visual-selection'

Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'

Plug 'valloric/youcompleteme'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
" Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Plug 'sheerun/vim-polyglot'
Plug 'majutsushi/tagbar'
Plug 'tpope/vim-commentary'
Plug 'godlygeek/tabular'
Plug 'yggdroot/indentline'
Plug 'easymotion/vim-easymotion'
Plug 'chiel92/vim-autoformat'
Plug 'joelbeedle/pseudo-syntax'

call plug#end()

let mapleader=';'
" let g:indentLine_char = '|'
let g:indentLine_char='▏'
" let g:indentLine_first_char= '▏'
" let g:indentLine_showFirstIndentLevel=1
let g:indentLine_fileTypeExclude=['help', 'text', 'sh']
let g:indentLine_bufTypeExclude=['help', 'NERDTree', 'shell']
" let g:indentLine_color_gui = '#A4E57E'
let g:indentLine_color_gui = '#666666'

"theme
set termguicolors
set laststatus=2

syntax on
set t_Co=256
" colorscheme gruvbox
colorscheme onedark
" colorscheme solarized8_flat
" colorscheme codedark
" colorscheme ghdark

" let g:github_colors_soft = 1
set bg=dark
" colorscheme github
" hi Normal guibg=NONE ctermbg=NONE
" hi Normal guibg=#141617
" hi Visual cterm=NONE ctermbg=0 ctermfg=NONE guibg=#264F78

"gruvbox cursorline color
" hi Visual cterm=NONE ctermbg=0 ctermfg=NONE guibg=Grey30



"on tmux
if (empty($TMUX))
  if (has("nvim"))
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  if (has("termguicolors"))
    set termguicolors
  endif
endif


"NERDTree
nnoremap <space>e :NERDTreeToggle<CR>
nnoremap <leader>r :NERDTreeFind<CR>
"let NERDTreeMinimalUI=1
" Close the tab if NERDTree is the only window remaining in it.
autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
"to recover NERDTree
"let g:NERDTreeNodeDelimiter = "\u00a0"




"ycm
" let g:ycm_global_ycm_extra_conf='~/.vim/plugged/youcompleteme/.ycm_extra_conf.py'
let g:ycm_key_list_select_completion=['<c-n>']
let g:ycm_key_list_previous_completion=['<c-p>']
let g:ycm_show_diagnostics_ui = 0
" let g:ycm_autoclose_preview_window_after_completion=1
" let g:ycm_autoclose_preview_window_after_insertion=1
let g:ycm_auto_hover=" "
nmap <leader>h <plug>(YCMHover)
nnoremap <leader>y :let g:ycm_auto_trigger=0<CR>
nnoremap <leader>Y :let g:ycm_auto_trigger=1<CR>
let g:ycm_clangd_args=['--header-insertion=never']
"let g:ycm_max_num_identifier_candidates = 50
" let g:ycm_auto_trigger = 1
" let g:ycm_error_symbol = '>>'
" let g:ycm_warning_symbol = '>'

set completeopt=menu,menuone,popuphidden  "關閉preview window
let g:ycm_add_preview_to_completeopt=0
"let g:ycm_autoclose_preview_window_after_completion=1
"let g:ycm_autoclose_preview_window_after_insertion=1
"let g:ycm_always_populate_location_list = 0

let g:ycm_confirm_extra_conf=0 "關閉載入.ycm_extra_conf.py提示
let g:ycm_collect_identifiers_from_tags_files=1 " 開啟 YCM 基於標籤引擎
let g:ycm_min_num_of_chars_for_completion=1 " 從第1個鍵入字元就開始羅列匹配項
let g:ycm_cache_omnifunc=0 " 禁止快取匹配項,每次都重新生成匹配項
let g:ycm_seed_identifiers_with_syntax=1 " 語法關鍵字補全
"nnoremap <leader>lo :lopen<CR> "open locationlist
"nnoremap <leader>lc :lclose<CR>    "close locationlist

"inoremap <leader><leader> <C-x><C-o>
let g:ycm_complete_in_comments = 1 "在註釋輸入中也能補全
let g:ycm_complete_in_strings = 1 "在字串輸入中也能補全
let g:ycm_collect_identifiers_from_comments_and_strings = 0 "註釋和字串中的文字也會被收入補全

nnoremap <leader>go :YcmCompleter GoTo<CR> "跳轉
nnoremap <leader>gd :YcmCompleter GoToDefinitionElseDeclaration<CR> "跳轉到定義或宣告
nnoremap <leader>gt :YcmCompleter GetType<CR> "get型別

nmap gi :YcmCompleter GoToInclude<CR>   "跳轉到include、宣告或定義
nmap gm :YcmCompleter GoToImprecise<CR> "跳轉到實現
nmap gr :YcmCompleter GoToReferences<CR> "跳轉到引用
nmap fi :YcmCompleter FixIt<CR> "根據Ycm的建議修復錯誤

let g:ycm_semantic_triggers =  {
			\ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
			\ 'cs,lua,javascript': ['re!\w{2}'],
			\ }

let g:ycm_filetype_whitelist = {
            \ "c":1,
            \ "cpp":1,
            \ "go":1,
            \ "python":1,
            \ "sh":1,
            \ "zsh":1,
            \ "javascript":1,
            \ }

let g:ycm_filetype_blacklist = {
        \ 'markdown' : 1,
        \ 'pandoc' : 1,
        \ 'infolog' : 1,
        \}

augroup MyYCMCustom
  autocmd!
  autocmd FileType c,cpp let b:ycm_hover = {
    \ 'command': 'GetDoc',
    \ 'syntax': &filetype
    \ }
augroup END


""coc
"set shortmess+=c
"inoremap <silent><expr> <TAB>
"	\ pumvisible() ? "\<C-n>" :
"	\ <SID>check_back_space() ? "\<TAB>" :
"	\ coc#refresh()
"inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

"function! s:check_back_space() abort
"	let col = col('.') - 1
"	return !col || getline('.')[col - 1]  =~# '\s'
"endfunction

"nnoremap <silent> K :call <SID>show_documentation()<CR>
"function! s:show_documentation()
"  if (index(['vim','help'], &filetype) >= 0)
"    execute 'h '.expand('<cword>')
"  else
"    call CocAction('doHover')
"  endif
"endfunction

"autocmd CursorHold * silent call CocActionAsync('highlight')
"inoremap <silent><expr> <c-space> coc#refresh()


"inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
"	\: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>";

"nmap <silent> gd <Plug>(coc-definition)
"nmap <silent> gy <Plug>(coc-type-definition)
"nmap <silent> gi <Plug>(coc-implementation)
"nmap <silent> gr <Plug>(coc-references)




"fzf
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.9 } }
let $FZF_DEFAULT_OPTS="--ansi --preview-window 'right:60%' --layout reverse --margin=1,4"
let $FZF_DEFAULT_OPTS="--ansi --preview-window 'right:60%' --layout reverse --margin=1,4 --preview 'bat --color=always --style=header,grid --line-range :300 {}'"
" This is the default extra key bindings
let g:fzf_action = {
            \ 'ctrl-t': 'tab split',
            \ 'ctrl-x': 'split',
            \ 'ctrl-v': 'vsplit' }
" Customize fzf colors to match your color scheme
let g:fzf_colors =
            \ { 'fg':      ['fg', 'Normal'],
            \ 'bg':      ['bg', 'Normal'],
            \ 'hl':      ['fg', 'Comment'],
            \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
            \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
            \ 'hl+':     ['fg', 'Statement'],
            \ 'info':    ['fg', 'PreProc'],
            \ 'prompt':  ['fg', 'Conditional'],
            \ 'pointer': ['fg', 'Exception'],
            \ 'marker':  ['fg', 'Keyword'],
            \ 'spinner': ['fg', 'Label'],
            \ 'header':  ['fg', 'Comment'] }
let g:fzf_history_dir = '~/.local/share/fzf-history'
" nnoremap <leader>fl :Lines
" nnoremap <leader>fb :BLines
nnoremap <leader>ff :Files<CR>
" nnoremap <leader>fg :GFiles
" nnoremap <leader>f? :GFiles?
" nnoremap <leader>ft :Tags<cr>
" nnoremap <leader>fa :Ag
" nnoremap <leader>fc :Commits
nnoremap <leader>fh :History<CR>
function! s:find_git_root()
  return system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
endfunction

command! FileRoot execute 'Files' s:find_git_root()
nnoremap <leader>fr :FileRoot<CR>



"tagbar
nnoremap <space>t :TagbarToggle<CR>
let g:tagbar_ctags_bin='ctags'
let g:tagbar_width=30

"clang-format
" if !executable('clang-format') && executable('clang-format-3.5')
"   let g:clang_format#command = 'clang-format-3.5'
" endif

let g:clang_format#command = 'clang-format'
" nmap <leader>c :ClangFormat<cr>
vnoremap <leader>c :ClangFormat<CR>
" autocmd FileType c,cpp ClangFormatAutoEnable
let g:clang_format#detect_style_file = 0

let g:clang_format#style_options = {
      \"Language" : "Cpp",
      \"BasedOnStyle" : "LLVM",
      \"BreakBeforeBraces": "Allman",
      \"FixNamespaceComments": "true",
      \"IndentCaseLabels": "true",
      \"NamespaceIndentation": "None",
      \"BreakConstructorInitializersBeforeComma": "true",
      \"AllowShortFunctionsOnASingleLine": "true",
      \"ColumnLimit": "80",
      \"SortIncludes" : "false",
      \"Cpp11BracedListStyle" : "false",
      \}

" let g:clang_format#style_options = {
"         \ "Language" : "Cpp",
"         \ "BasedOnStyle" : "Google",
"         \ "AccessModifierOffset" : -1,
"         \ "AlignAfterOpenBracket" : "true",
"         \ "AlignEscapedNewlinesLeft" : "true",
"         \ "AlignOperands" : "true",
"         \ "AlignTrailingComments" : "true",
"         \ "AllowAllParametersOfDeclarationOnNextLine" : "true",
"         \ "AllowShortBlocksOnASingleLine" : "false",
"         \ "AllowShortCaseLabelsOnASingleLine" : "false",
"         \ "AllowShortIfStatementsOnASingleLine" : "true",
"         \ "AllowShortLoopsOnASingleLine" : "true",
"         \ "AllowShortFunctionsOnASingleLine" : "true",
"         \ "AlwaysBreakAfterDefinitionReturnType" : "false",
"         \ "AlwaysBreakTemplateDeclarations" : "true",
"         \ "AlwaysBreakBeforeMultilineStrings" : "true",
"         \ "BreakBeforeBinaryOperators" : "None",
"         \ "BreakBeforeTernaryOperators" : "true",
"         \ "BreakConstructorInitializersBeforeComma" : "false",
"         \ "BinPackParameters" : "true",
"         \ "BinPackArguments" : "true",
"         \ "ColumnLimit" : 0,
"         \ "ConstructorInitializerAllOnOneLineOrOnePerLine" : "true",
"         \ "ConstructorInitializerIndentWidth" : 2,
"         \ "DerivePointerAlignment" : "true",
"         \ "ExperimentalAutoDetectBinPacking" : "false",
"         \ "IndentCaseLabels" : "true",
"         \ "IndentWrappedFunctionNames" : "false",
"         \ "IndentFunctionDeclarationAfterType" : "false",
"         \ "MaxEmptyLinesToKeep" : 1,
"         \ "KeepEmptyLinesAtTheStartOfBlocks" : "false",
"         \ "NamespaceIndentation" : "None",
"         \ "ObjCBlockIndentWidth" : 2,
"         \ "ObjCSpaceAfterProperty" : "false",
"         \ "ObjCSpaceBeforeProtocolList" : "false",
"         \ "PenaltyBreakBeforeFirstCallParameter" : 1,
"         \ "PenaltyBreakComment" : 300,
"         \ "PenaltyBreakString" : 1000,
"         \ "PenaltyBreakFirstLessLess" : 120,
"         \ "PenaltyExcessCharacter" : 1000000,
"         \ "PenaltyReturnTypeOnItsOwnLine" : 200,
"         \ "PointerAlignment" : "Left",
"         \ "SpacesBeforeTrailingComments" : 2,
"         \ "Cpp11BracedListStyle" : "true",
"         \ "Standard" : "Auto",
"         \ "IndentWidth" : 2,
"         \ "TabWidth" : 8,
"         \ "UseTab" : "Never",
"         \ "BreakBeforeBraces" : "Attach",
"         \ "SpacesInParentheses" : "false",
"         \ "SpacesInSquareBrackets" : "false",
"         \ "SpacesInAngles" : "false",
"         \ "SpaceInEmptyParentheses" : "false",
"         \ "SpacesInCStyleCastParentheses" : "false",
"         \ "SpaceAfterCStyleCast" : "false",
"         \ "SpacesInContainerLiterals" : "true",
"         \ "SpaceBeforeAssignmentOperators" : "true",
"         \ "ContinuationIndentWidth" : 4 }

" nnoremap <Leader>c :ClangFormat<CR>
" map <C-I> :pyf path_to_clang_format/clang-format.py<CR>
" imap <C-I> <ESC>:pyf path_to_clang_format/clang-format.py<CR>i

"markdown
"Uncomment to override defaults:
"let g:instant_markdown_slow = 1
"let g:instant_markdown_autostart = 0
"let g:instant_markdown_open_to_the_world = 1
"let g:instant_markdown_allow_unsafe_content = 1
"let g:instant_markdown_allow_external_content = 0
"let g:instant_markdown_mathjax = 1
"let g:instant_markdown_mermaid = 1
"let g:instant_markdown_logfile = '/tmp/instant_markdown.log'
"let g:instant_markdown_autoscroll = 0
"let g:instant_markdown_port = 8888
"let g:instant_markdown_python = 1

"ale
let g:ale_sign_column_always = 1
let g:ale_set_highlights = 0
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '⚡'
let g:ale_statusline_format = ['✗ %d', '⚡ %d', '✔ OK']
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_lint_on_text_changed = 'normal'

let g:ale_linters_explicit = 1
let g:ale_linters = {
  \   'csh': ['shell'],
  \   'sh': ['shell'],
  \   'zsh': ['shell'],
  \   'go': ['gofmt', 'golint'],
  \   'python': ['flake8', 'mypy', 'pylint'],
  \   'c': ['gcc', 'cppcheck', 'clang'],
  \   'cpp': ['gcc', 'cppcheck'],
  \   'text': [],
  \}

let g:ale_fixers = {
  \   'python': ['yapf', 'isort'],
  \}

" let g:ale_c_gcc_options = '-Wall -O2 -std=c99'
" let g:ale_cpp_gcc_options = '-Wall -O2 -std=c++2a'
" let g:ale_c_clang_options = '-Wall -O2 -std=c99'
" let g:ale_cpp_clang_options = '-Wall -O2 -std=c++2a'
" let g:ale_c_cppcheck_options = ''
" let g:ale_cpp_cppcheck_options = ''

" let g:ale_cpp_cc_options = '-Wall -O2 -std=c++2a -I/usr/include/SDL2 -lSDL2 -lSDL2_image'
" let g:ale_c_cc_options = '-Wall -O2 -I/usr/include -lGL -lGLU -lglut -lGLEW -lglfw -lglad -I/usr/include/SDL2 -lSDL2 -lSDL2_image'
let g:ale_cpp_cc_options = '-Wall -O2 -std=c++2a -I/usr/include -lGL -lGLU -lglut -lGLEW -lglfw -lglad -I/usr/include/SDL2 -I./ -lSDL2 -lSDL2_image'
highlight clear ALEErrorSign
highlight clear ALEWarningSign
nmap sp <Plug>(ale_previous_wrap)
nmap sn <Plug>(ale_next_wrap)
nnoremap <Leader>s :ALEToggle<CR>
nnoremap <Leader>d :lopen<CR>

"lightline-ale
let g:lightline = {}

let g:lightline = {
  \ 'colorscheme': 'onedark',
  \ }

let g:lightline.component_expand = {
      \  'linter_checking': 'lightline#ale#checking',
      \  'linter_infos': 'lightline#ale#infos',
      \  'linter_warnings': 'lightline#ale#warnings',
      \  'linter_errors': 'lightline#ale#errors',
      \  'linter_ok': 'lightline#ale#ok',
      \ }

let g:lightline.component_type = {
      \     'linter_checking': 'right',
      \     'linter_infos': 'right',
      \     'linter_warnings': 'warning',
      \     'linter_errors': 'error',
      \     'linter_ok': 'right',
      \ }

let g:lightline.active = {
            \ 'right': [ [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_infos', 'linter_ok' ],
            \            [ 'lineinfo' ],
            \            [ 'percent' ],
            \            [ 'fileformat', 'fileencoding', 'filetype'] ],
            \ }


let g:lightline#ale#indicator_checking = "⟳"
let g:lightline#ale#indicator_infos = "ⓘ "
let g:lightline#ale#indicator_warnings = "⚡"
let g:lightline#ale#indicator_errors = "✗ "
let g:lightline#ale#indicator_ok = "✔"

function! LightlineLinterWarnings() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ◆', all_non_errors)
endfunction
" Update the lightline scheme from the colorscheme. Hopefully.

function! LightlineLinterErrors() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ✗', all_errors)
endfunction

function! LightlineLinterOK() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '✓ ' : ''
endfunction

" Update and show lightline but only if it's visible (e.g., not in Goyo)
function! s:MaybeUpdateLightline()
  if exists('#lightline')
    call lightline#update()
  end
endfunction

function! s:UpdateLightlineColorScheme()
  let g:lightline.colorscheme = g:colors_name
  call lightline#init()
endfunction

augroup _lightline
  autocmd!
  autocmd ColorScheme * call s:UpdateLightlineColorScheme()
augroup END

augroup LightLineOnALE
  autocmd!
  autocmd User ALEFixPre   call lightline#update()
  autocmd User ALEFixPost  call lightline#update()
  autocmd User ALELintPre  call lightline#update()
  autocmd User ALELintPost call lightline#update()
augroup end

"easymotion
" map  <Leader>ee <Plug>(easymotion-bd-f)
" map  <Leader>es <Plug>(easymotion-s2)
" map  n <Plug>(easymotion-next)
" map  N <Plug>(easymotion-prev)
" map  <Leader>ew <Plug>(easymotion-bd-w)
" nmap <Leader>ew <Plug>(easymotion-overwin-w)

let g:EasyMotion_do_mapping = 0 " Disable default mappings

nmap fe <Plug>(easymotion-bd-f)
nmap se <Plug>(easymotion-overwin-f2)

" Turn on case-insensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)




nnoremap <Leader>w :w<CR>
nnoremap <space>q :q<CR>
nnoremap <Leader>Q :q!<CR>
nnoremap <Leader>so :w<CR>:so ~/.vimrc<CR>
nnoremap L :tabnext<CR>
nnoremap H :tabprevious<CR>
nnoremap <C-L> <C-W>l
nnoremap <C-H> <C-W>h
nnoremap td :tabnew .<CR>
nnoremap te :tabedit<CR>
nnoremap tc :tabclose<CR>
vnoremap <Leader>y "+y


set encoding=UTF-8
set nocompatible
set mouse=a
set langmenu=en_US
set autoindent
set guifont=14
"set cmdheight=2
set number
set rnu
set clipboard=unnamed
set noswapfile
set completeopt=longest,menuone
set pumheight=10
set updatetime=300
let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"
set hlsearch
set ignorecase
set incsearch
set expandtab
set softtabstop=2
set tabstop=2
set shiftwidth=2
set showtabline=2
set splitbelow
set splitright
set scrolloff=8
set sidescrolloff=8
"set colorcolumn=80
set cursorline
"set cursorcolumn
filetype on
filetype indent on
filetype plugin on
let c_no_curly_error=1
let cpp_no_curly_error=1
set noshowmode
set showcmd
autocmd BufWritePre * :%s/\s\+$//e

"clipboard
set clipboard=unnamedplus
vnoremap <C-c> "+y



nnoremap / :let @/=""<CR>/
inoremap ( ()<Esc>i
inoremap { {}<Esc>i
inoremap {<CR> {<CR>}<Esc>O
inoremap [ []<Esc>i
inoremap ' ''<Esc>i
inoremap " ""<Esc>i
inoremap <C-h> <Left>
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-l> <Right>
inoremap jk <Esc>
nnoremap<A-Left> :-tabmove<CR>
nnoremap<A-Right> :+tabmove<CR>
nnoremap vp vi(
nnoremap v[ vi{
"vnoremap cc I// <Esc>
"command! W w !sudo tee
command Glad :%s/glad_//g

vnoremap J :move '>+1<CR>gv-gv
vnoremap K :move '<-2<CR>gv-gv

"abbreviate
iab #b /****************************************
iab #e <Space>****************************************/

"delete buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
    let l:currentBufNum = bufnr("%")
    let l:alternateBufNum = bufnr("#")

    if buflisted(l:alternateBufNum)
        buffer #
    else
        bnext
    endif

    if bufnr("%") == l:currentBufNum
        new
    endif

    if buflisted(l:currentBufNum)
        execute("bdelete! ".l:currentBufNum)
    endif
endfunction

"C++ Class Generator
 function! Class(ClassName)
    "==================  editing header file =====================
     let header = a:ClassName.".h"
     execute "tabe %:h/" . a:ClassName . ".h"
     call append(0,"#ifndef ".toupper(a:ClassName)."_H")
     call append(1,"#define ".toupper(a:ClassName)."_H")
     call append(2," ")
     call append(3,"class ".a:ClassName )
     call append(4, "{")
     call append(5, "   public:")
     call append(6, "      ".a:ClassName."();")
     call append(7, "      virtual ~".a:ClassName."();")
     call append(8, "   protected:")
     call append(9, "   private:")
     call append(10, "};")
     call append(11,"#endif // ".toupper(a:ClassName)."_H")
     :execute 'write' header
   "================== editing source file ========================
     let src    = a:ClassName.".cpp"
     execute "tabe %:h/" . a:ClassName . ".cpp"
     call append(0,"#include \"".a:ClassName.".h\"")
     call append(1," ")
     call append(2,a:ClassName."::".a:ClassName."()")
     call append(3,"{")
     call append(4,"//ctor ")
     call append(5,"}")
     call append(6," ")
     call append(7," ")
     call append(8,a:ClassName."::~".a:ClassName."()")
     call append(9,"{")
     call append(10,"//dtor ")
     call append(11,"}")
     :execute 'write' src
endfunction
command! -nargs=1 Class call Class(<f-args>)
